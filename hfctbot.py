import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand
from aiogram import Router
from datetime import datetime, timedelta

API_TOKEN = '8247074222:AAHBww997RhstLFKr3t_MtnRQjU1P_YNfw8'

ADMIN_IDS = [462076, 306535565, 57656547]

syrops = [
    "–ö–æ–∫–æ—Å", "–õ–µ—Å–Ω–æ–π –æ—Ä–µ—Ö", "–ú–∏–Ω–¥–∞–ª—å", "–§–∏—Å—Ç–∞—à–∫–∞", "–ö–ª—ë–Ω-–∫–∞—à—Ç–∞–Ω",
    "–ë–æ–±—ã —Ç–æ–Ω–∫–∞", "–í–∞–Ω–∏–ª—å", "–ò—Ä–∏—Å–∫–∞", "–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π –∫—Ä–µ–º", "–ö–∞—Ä–∞–º–µ–ª—å", "–õ–∞–≤–∞–Ω–¥–∞", "–ü–æ–ø–∫–æ—Ä–Ω",
    "–°–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å", "–°–≥—É—â—ë–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ", "–¢–∞–±–∞–∫-–≤–∞–Ω–∏–ª—å", "–≠–≤–∫–∞–ª–∏–ø—Ç –∏ –º—è—Ç–∞", "–®–æ–∫–æ–ª–∞–¥",
    "–í–∏—à–Ω—è", "–ì—Ä—É—à–∞", "–ï–∂–µ–≤–∏–∫–∞", "–ö–ª—É–±–Ω–∏–∫–∞ & –∑–µ–º–ª—è–Ω–∏–∫–∞", "–ú–∞–ª–∏–Ω–∞", "–ß—ë—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞",
    "–ö–∞—à–µ–º–∏—Ä–æ–≤—ã–π –ø–µ—Ä—Å–∏–∫", "–Ø–±–ª–æ–∫–æ"
]

summer_menu = {
    "–ö–æ—Ñ–µ": {
        "–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –∞–π—Å –ª–∞—Ç—Ç–µ —Å–æ —Å–ª–∏–≤–æ—á–Ω–æ-—Å–æ–ª—ë–Ω–æ–π –ø–µ–Ω–∫–æ–π": {"450": 350},
        "–ë–∞–º–±–ª —Å–æ —Å–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–º —Å–æ–∫–æ–º": {"350": 390, "450": 440},
        "–≠—Å–ø—Ä–µ—Å—Å–æ —Ç–æ–Ω–∏–∫ –≥—Ä–µ–π–ø—Ñ—Ä—É—Ç": {"350": 390, "450": 440},
        "–ö–æ–ª–¥–±—Ä—é —Ç—ë–º–Ω—ã–π —Ä–æ–º —Å–æ —Å–ª–∏–≤–æ—á–Ω–æ-—Å–æ–ª—ë–Ω–æ–π –ø–µ–Ω–∫–æ–π": {"350": 350}
    },
    "–ß–∞–π": {
        "–Ø–±–ª–æ—á–Ω—ã–π —Å–æ—Ä–±–µ—Ç –º–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ": {"350": 280, "450": 310},
        "–ê–Ω—á–∞–Ω –º–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ –∫–æ–∫–æ—Å": {"450": 350},
        "–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π —á–∞–π —Å —Ä–æ–º–∞—à–∫–æ–π": {"450": 330}
    },
    "–õ–∏–º–æ–Ω–∞–¥—ã": {
        "–õ–∏–º–æ–Ω–∞–¥ –º–∞–Ω–≥–æ-–º–∞—Ä–∞–∫—É–π—è": {"450": 330},
        "–õ–∏–º–æ–Ω–∞–¥ –º–∞–ª–∏–Ω–∞-–º–∞—Ä–∞–∫—É–π—è": {"450": 330},
        "–õ–∏–º–æ–Ω–∞–¥ —á—ë—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞-–º—è—Ç–∞": {"450": 280},
        "–õ–∏–º–æ–Ω–∞–¥ —á–µ—Ä–Ω–∏–∫–∞-–º—è—Ç–∞": {"450": 280}
    }
}

menu = {
    "–ß—ë—Ä–Ω—ã–π –∫–æ—Ñ–µ": [
        "–≠—Å–ø—Ä–µ—Å—Å–æ –¥–≤–æ–π–Ω–æ–π", "–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–§–∏–ª—å—Ç—Ä", "–ö–æ–ª–¥–±—Ä—é", "–í–æ—Ä–æ–Ω–∫–∞ V60", "–û—Ä–∞–Ω–∂ –∫–æ—Ñ–µ", "–ß–µ—Ä—Ä–∏ —Ñ–∏–ª—å—Ç—Ä"
    ],
    "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º": [
        "–õ–∞—Ç—Ç–µ", "–ö–∞–ø—É—á–∏–Ω–æ", "–ö–∞–ø—É—á–∏–Ω–æ –ö—Ä–∏–º", "–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ", "–§–ª—ç—Ç —É–∞–π—Ç",
        "–í–∞–Ω–∏–ª—å–Ω—ã–π —Ä–∞—Ñ", "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥", "–ö–∞–∫–∞–æ", "–ü—Ä—è–Ω–æ–µ –∫–∞–∫–∞–æ", "–ö–∞–∫–∞–æ —Å–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å"
    ],
    "SWEET&CRAFT": [
        "–†–∞—Ñ –∏–Ω–∂–∏—Ä –∏ –ª–∞–≤–∞–Ω–¥–∞", "–†–∞—Ñ –º–∞–ª–∏–Ω–∞ –∏ –≤–∞–Ω–∏–ª—å", "–õ–∞—Ç—Ç–µ –≥–æ–ª—É–±–∏–∫–∞", "–õ–∞—Ç—Ç–µ –∞–±—Ä–∏–∫–æ—Å-–ø–∞–Ω–µ–ª–∞",
        "–ù–∞—Ç–∫—Ä–µ–∫–µ—Ä —Å–≤–∏—Ç –∫–∞–ø—É—á–∏–Ω–æ", "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –º–æ–∫–∫–æ", "–ë–µ–ª—ã–π —à–æ–∫–æ–ª–∞–¥"
    ],
    "–ß–∞–π": [
        "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π", "–†–æ–π–±–æ—Å —Å –∞–ø–µ–ª—å—Å–∏–Ω–æ–º –∏ –º—ë–¥–æ–º", "–ú–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ –∑–µ–ª—ë–Ω—ã–π", "–ê–Ω—á–∞–Ω –º–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ", "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ"
    ],
    "–î–µ—Ç—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏": [
        "–ö–∞–∫–∞–æ —Å –∑–µ—Ñ–∏—Ä–∫–∞–º–∏", "–î–µ—Ç—Å–∫–∏–π –ª–∞—Ç—Ç–µ"
    ]
}

sizes = {
    "–≠—Å–ø—Ä–µ—Å—Å–æ –¥–≤–æ–π–Ω–æ–π": ["S"],
    "–ê–º–µ—Ä–∏–∫–∞–Ω–æ": ["S", "M", "L"],
    "–§–∏–ª—å—Ç—Ä": ["S", "M", "L"],
    "–ö–æ–ª–¥–±—Ä—é": ["S", "M"],
    "–í–æ—Ä–æ–Ω–∫–∞ V60": ["S", "L"],
    "–û—Ä–∞–Ω–∂ –∫–æ—Ñ–µ": ["S", "M", "L"],
    "–ß–µ—Ä—Ä–∏ —Ñ–∏–ª—å—Ç—Ä": ["S", "M", "L"],
    "–õ–∞—Ç—Ç–µ": ["M", "L"],
    "–ö–∞–ø—É—á–∏–Ω–æ": ["S", "M", "L"],
    "–ö–∞–ø—É—á–∏–Ω–æ –ö—Ä–∏–º": ["S", "M", "L"],
    "–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ": ["S", "M", "L"],
    "–§–ª—ç—Ç —É–∞–π—Ç": ["S"],
    "–í–∞–Ω–∏–ª—å–Ω—ã–π —Ä–∞—Ñ": ["M", "L"],
    "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥": ["S", "M", "L"],
    "–ö–∞–∫–∞–æ": ["S", "M", "L"],
    "–ü—Ä—è–Ω–æ–µ –∫–∞–∫–∞–æ": ["S", "M", "L"],
    "–ö–∞–∫–∞–æ —Å–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å": ["S", "M", "L"],
    "–†–∞—Ñ –∏–Ω–∂–∏—Ä –∏ –ª–∞–≤–∞–Ω–¥–∞": ["M", "L"],
    "–†–∞—Ñ –º–∞–ª–∏–Ω–∞ –∏ –≤–∞–Ω–∏–ª—å": ["M", "L"],
    "–õ–∞—Ç—Ç–µ –≥–æ–ª—É–±–∏–∫–∞": ["M", "L"],
    "–õ–∞—Ç—Ç–µ –∞–±—Ä–∏–∫–æ—Å-–ø–∞–Ω–µ–ª–∞": ["M", "L"],
    "–ù–∞—Ç–∫—Ä–µ–∫–µ—Ä —Å–≤–∏—Ç –∫–∞–ø—É—á–∏–Ω–æ": ["M", "L"],
    "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –º–æ–∫–∫–æ": ["M", "L"],
    "–ë–µ–ª—ã–π —à–æ–∫–æ–ª–∞–¥": ["M", "L"],
    "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π": ["M", "L"],
    "–†–æ–π–±–æ—Å —Å –∞–ø–µ–ª—å—Å–∏–Ω–æ–º –∏ –º—ë–¥–æ–º": ["M", "L"],
    "–ú–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ –∑–µ–ª—ë–Ω—ã–π": ["S", "M", "L"],
    "–ê–Ω—á–∞–Ω –º–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ": ["S", "M", "L"],
    "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ": ["S", "M", "L"],
    "–ö–∞–∫–∞–æ —Å –∑–µ—Ñ–∏—Ä–∫–∞–º–∏": ["S", "M", "L"],
    "–î–µ—Ç—Å–∫–∏–π –ª–∞—Ç—Ç–µ": ["S", "M", "L"]
}

prices = {
    "–≠—Å–ø—Ä–µ—Å—Å–æ –¥–≤–æ–π–Ω–æ–π": {"S": 160},
    "–ê–º–µ—Ä–∏–∫–∞–Ω–æ": {"S": 180, "M": 210, "L": 240},
    "–§–∏–ª—å—Ç—Ä": {"S": 230, "M": 260, "L": 290},
    "–ö–æ–ª–¥–±—Ä—é": {"S": 250, "M": 270},
    "–í–æ—Ä–æ–Ω–∫–∞ V60": {"S": 250, "L": 290},
    "–û—Ä–∞–Ω–∂ –∫–æ—Ñ–µ": {"S": 250, "M": 280, "L": 310},
    "–ß–µ—Ä—Ä–∏ —Ñ–∏–ª—å—Ç—Ä": {"S": 250, "M": 280, "L": 310},
    "–õ–∞—Ç—Ç–µ": {"M": 255, "L": 280},
    "–ö–∞–ø—É—á–∏–Ω–æ": {"S": 230, "M": 260, "L": 290},
    "–ö–∞–ø—É—á–∏–Ω–æ –ö—Ä–∏–º": {"S": 250, "M": 280, "L": 310},
    "–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ": {"S": 290, "M": 340, "L": 380},
    "–§–ª—ç—Ç —É–∞–π—Ç": {"S": 255},
    "–í–∞–Ω–∏–ª—å–Ω—ã–π —Ä–∞—Ñ": {"M": 280, "L": 330},
    "–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥": {"S": 290, "M": 310, "L": 340},
    "–ö–∞–∫–∞–æ": {"S": 230, "M": 260, "L": 290},
    "–ü—Ä—è–Ω–æ–µ –∫–∞–∫–∞–æ": {"S": 240, "M": 270, "L": 300},
    "–ö–∞–∫–∞–æ —Å–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å": {"S": 260, "M": 295, "L": 330},
    "–†–∞—Ñ –∏–Ω–∂–∏—Ä –∏ –ª–∞–≤–∞–Ω–¥–∞": {"M": 280, "L": 320},
    "–†–∞—Ñ –º–∞–ª–∏–Ω–∞ –∏ –≤–∞–Ω–∏–ª—å": {"M": 290, "L": 330},
    "–õ–∞—Ç—Ç–µ –≥–æ–ª—É–±–∏–∫–∞": {"M": 270, "L": 310},
    "–õ–∞—Ç—Ç–µ –∞–±—Ä–∏–∫–æ—Å-–ø–∞–Ω–µ–ª–∞": {"M": 270, "L": 310},
    "–ù–∞—Ç–∫—Ä–µ–∫–µ—Ä —Å–≤–∏—Ç –∫–∞–ø—É—á–∏–Ω–æ": {"M": 310, "L": 350},
    "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π –º–æ–∫–∫–æ": {"M": 290, "L": 330},
    "–ë–µ–ª—ã–π —à–æ–∫–æ–ª–∞–¥": {"M": 280, "L": 320},
    "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π": {"M": 220, "L": 240},
    "–†–æ–π–±–æ—Å —Å –∞–ø–µ–ª—å—Å–∏–Ω–æ–º –∏ –º—ë–¥–æ–º": {"M": 240, "L": 260},
    "–ú–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ –∑–µ–ª—ë–Ω—ã–π": {"S": 240, "M": 260, "L": 280},
    "–ê–Ω—á–∞–Ω –º–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ": {"S": 240, "M": 260, "L": 280},
    "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ": {"S": 300, "M": 340, "L": 370},
    "–ö–∞–∫–∞–æ —Å –∑–µ—Ñ–∏—Ä–∫–∞–º–∏": {"S": 280, "M": 310, "L": 340},
    "–î–µ—Ç—Å–∫–∏–π –ª–∞—Ç—Ç–µ": {"S": 180, "M": 200, "L": 220},
}

tea_types = [
    "–ß—ë—Ä–Ω—ã–π —Å –º–∞–Ω–≥–æ", "–ó–µ–ª—ë–Ω—ã–π —Å –∂–∞—Å–º–∏–Ω–æ–º", "–≠—Ä–ª –≥—Ä–µ–π", "–ö–∞—Ä–∫–∞–¥–µ –≤–∏—à–Ω—ë–≤—ã–π",
    "–¢–∞—ë–∂–Ω—ã–π —Å –º–æ–∂–∂–µ–≤–µ–ª—å–Ω–∏–∫–æ–º", "–ë–µ–ª—ã–π –ø–∏–æ–Ω", "–°–∞–π–≥–∞–Ω-–¥–∞–π–ª—è", "–ü—É-—ç—Ä"
]

alt_milk_types = [
    "–û–≤—Å—è–Ω–æ–µ", "–ö–æ–∫–æ—Å–æ–≤–æ–µ", "–§—É–Ω–¥—É—á–Ω–æ–µ", "–ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ", "–ë–∞–Ω–∞–Ω–æ–≤–æ–µ", "–§–∏—Å—Ç–∞—à–∫–æ–≤–æ–µ"
]

dopings_full = [
    ("–°–∏—Ä–æ–ø", 50),
    ("–ó–µ—Ñ–∏—Ä–∫–∏", 30),
    ("–ú—ë–¥", 30),
    ("–î–æ–ø. —ç—Å–ø—Ä–µ—Å—Å–æ", 60),
    ("–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–û–≤—Å—è–Ω–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–ö–æ–∫–æ—Å–æ–≤–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–§—É–Ω–¥—É—á–Ω–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–ú–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–ë–∞–Ω–∞–Ω–æ–≤–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–§–∏—Å—Ç–∞—à–∫–æ–≤–æ–µ –º–æ–ª–æ–∫–æ", 40),
    ("–°–∞—Ö–∞—Ä", 0),
    ("–ö–æ—Ä–∏—Ü–∞", 0)
]

dopings_names = [d[0] for d in dopings_full]

user_state = {}
router = Router()

BACK_TEXT = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

def back_button():
    return [KeyboardButton(text=BACK_TEXT)]

def start_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
        ],
        resize_keyboard=True
    )

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–õ–µ—Ç–Ω–µ–µ –º–µ–Ω—é")],
            *[[KeyboardButton(text=cat)] for cat in menu.keys()]
        ],
        resize_keyboard=True
    )

async def ask_category(message: types.Message, is_back=False):
    if user_state.get(message.from_user.id, {}).get('step') is None:
        kb = start_menu_keyboard()
        await message.answer("–ü—Ä–∏–≤–µ—Çüñêüèº –ù–∞–∂–º–∏ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=kb)
        user_state[message.from_user.id] = {}
        user_state[message.from_user.id]['step'] = None
        return
    kb = main_menu_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–∞:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_category'
    if not is_back:
        user_state[message.from_user.id]['history'] = []

@router.message(Command("start"))
async def start(message: types.Message):
    user_state[message.from_user.id] = {}
    user_state[message.from_user.id]['step'] = None
    await ask_category(message)

@router.message(lambda message: message.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def handle_make_order(message: types.Message):
    user_state[message.from_user.id] = {}
    user_state[message.from_user.id]['step'] = 'wait_category'
    await ask_category(message)

# --- BACK LOGIC ---

@router.message(lambda message: message.text == BACK_TEXT)
async def go_back(message: types.Message, bot: Bot):
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    user_id = message.from_user.id
    history = user_state.get(user_id, {}).get('history', [])
    
    if not history:
        await ask_category(message, is_back=True)
        return
    
    prev_step = history.pop()
    user_state[user_id]['step'] = prev_step
    state = user_state[user_id]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"User {user_id} going back from {state.get('step')} to {prev_step}")
    
    if prev_step == 'wait_category':
        await ask_category(message, is_back=True)
    elif prev_step == 'wait_summer_type':
        await summer_menu_choose_type(message, is_back=True)
    elif prev_step == 'wait_summer_drink':
        summer_type = state.get('summer_type', list(summer_menu.keys())[0])
        await summer_menu_choose_drink_fake(message, bot, summer_type)
    elif prev_step == 'wait_summer_size':
        summer_type = state.get('summer_type', list(summer_menu.keys())[0])
        drink = state.get('drink', list(summer_menu[summer_type].keys())[0])
        await summer_menu_choose_size_fake(message, bot, summer_type, drink)
    elif prev_step == 'wait_drink':
        category = state.get('category', list(menu.keys())[0])
        await choose_drink_fake(message, bot, category)
    elif prev_step == 'wait_size':
        category = state.get('category', list(menu.keys())[0])
        drink = state.get('drink', list(menu[category])[0])
        await choose_size_fake(message, bot, drink)
    elif prev_step == 'wait_tea_type':
        await check_special(message, bot, is_back=True)
    elif prev_step == 'wait_alt_milk':
        await check_special(message, bot, is_back=True)
    elif prev_step == 'wait_doping':
        await ask_dopings(message, bot, is_back=True)
    elif prev_step == 'wait_syrop':
        await ask_dopings(message, bot, is_back=True)
    # elif prev_step == 'wait_name':
    #     # –í–æ–∑–≤—Ä–∞—Ç —Å–æ —à–∞–≥–∞ –∏–º–µ–Ω–∏:
    #     # - –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–æ–∫
    #     # - –î–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ (—á–∞–π/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Ö –≤—ã–±–æ—Ä—É
    #     # - –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞
    #     category = state.get('category')
    #     drink = state.get('drink')
    #     if category == "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º":
    #         await ask_dopings(message, bot, is_back=True)
    #     elif drink == "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π" or drink in ["–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ", "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ"]:
    #         await check_special(message, bot, is_back=True)
    #     else:
    #         await choose_size_fake(message, bot, drink)
    elif prev_step == 'wait_card':
        # –í–æ–∑–≤—Ä–∞—Ç —Å–æ —à–∞–≥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã:
        # - –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–æ–∫
        # - –î–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ (—á–∞–π/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Ö –≤—ã–±–æ—Ä—É
        # - –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞
        category = state.get('category')
        drink = state.get('drink')
        if category == "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º":
            await ask_dopings(message, bot, is_back=True)
        elif drink == "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π" or drink in ["–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ", "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ"]:
            await check_special(message, bot, is_back=True)
        else:
            await choose_size_fake(message, bot, drink)
    elif prev_step == 'wait_time':
        await get_time(message, bot, is_back=True)
    elif prev_step == 'wait_comment':
        await ask_comment(message, bot, is_back=True)
    else:
        await ask_category(message, is_back=True)

# --- FAKE BACK FUNCTIONS ---

async def summer_menu_choose_drink_fake(message, bot, summer_type):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=drink)] for drink in summer_menu[summer_type].keys()] + [back_button()],
        resize_keyboard=True
    )
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_summer_drink'

async def summer_menu_choose_size_fake(message, bot, summer_type, drink):
    sizes_prices = summer_menu[summer_type][drink]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{size} –º–ª ({price}‚ÇΩ)")] for size, price in sizes_prices.items()] + [back_button()],
        resize_keyboard=True
    )
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_summer_size'

async def choose_drink_fake(message, bot, category):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=drink)] for drink in menu[category]] + [back_button()],
        resize_keyboard=True
    )
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_drink'

async def choose_size_fake(message, bot, drink):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{s} ({prices[drink][s]}‚ÇΩ)")] for s in sizes[drink]
        ] + [back_button()],
        resize_keyboard=True
    )
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_size'

# --- SUMMER MENU ---

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_category' and message.text == "–õ–µ—Ç–Ω–µ–µ –º–µ–Ω—é")
async def summer_menu_choose_type(message: types.Message, is_back=False):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in summer_menu.keys()] + [back_button()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –ª–µ—Ç–Ω–µ–≥–æ –º–µ–Ω—é:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_summer_type'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_category')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_summer_type' and message.text in summer_menu.keys())
async def summer_menu_choose_drink(message: types.Message, is_back=False):
    user_state[message.from_user.id]['summer_type'] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=drink)] for drink in summer_menu[message.text].keys()] + [back_button()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_summer_drink'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_summer_type')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_summer_drink' and any(message.text in summer_menu[cat] for cat in summer_menu))
async def summer_menu_choose_size(message: types.Message, is_back=False):
    summer_type = user_state[message.from_user.id]['summer_type']
    drink = message.text
    user_state[message.from_user.id]['drink'] = drink
    user_state[message.from_user.id]['summer'] = True
    sizes_prices = summer_menu[summer_type][drink]
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{size} –º–ª ({price}‚ÇΩ)")] for size, price in sizes_prices.items()] + [back_button()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_summer_size'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_summer_drink')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_summer_size' and ('–º–ª' in message.text and '(' in message.text))
async def summer_menu_finish_drink(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    size = message.text.split()[0]
    price = int(message.text.split('(')[1].split('‚ÇΩ')[0])
    user_state[message.from_user.id]['size'] = size
    user_state[message.from_user.id]['price'] = price
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –∏–º–µ–Ω–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã
    user_state[message.from_user.id]['name'] = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
    user_state[message.from_user.id]['step'] = 'wait_card'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_summer_size')

# --- MAIN MENU ---

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_category' and message.text in menu.keys())
async def choose_drink(message: types.Message, is_back=False):
    user_state[message.from_user.id]['category'] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=drink)] for drink in menu[message.text]] + [back_button()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_drink'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_category')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_drink' and any(message.text in drinks for drinks in menu.values()))
async def choose_size(message: types.Message, is_back=False):
    user_state[message.from_user.id]['drink'] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"{s} ({prices[message.text][s]}‚ÇΩ)")] for s in sizes[message.text]
        ] + [back_button()],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä:", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_size'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_drink')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_size' and any(message.text.startswith(s) for s in ["S", "M", "L"]))
async def check_special(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    size = message.text.split()[0]
    user_state[message.from_user.id]['size'] = size
    drink = user_state[message.from_user.id]['drink']
    user_state[message.from_user.id]['price'] = prices[drink][size]
    if drink == "–ß–∞–π –ª–∏—Å—Ç–æ–≤–æ–π":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=t)] for t in tea_types] + [back_button()],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–æ—Ä—Ç —á–∞—è:", reply_markup=kb)
        user_state[message.from_user.id]['step'] = 'wait_tea_type'
        if not is_back:
            user_state[message.from_user.id]['history'].append('wait_size')
    elif drink in ["–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ", "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ"]:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=m)] for m in alt_milk_types] + [back_button()],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ:", reply_markup=kb)
        user_state[message.from_user.id]['step'] = 'wait_alt_milk'
        if not is_back:
            user_state[message.from_user.id]['history'].append('wait_size')
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ (–Ω–µ —á–∞–π, –Ω–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ) –¥–æ–±–∞–≤–ª—è–µ–º wait_size –≤ –∏—Å—Ç–æ—Ä–∏—é
        if not is_back:
            user_state[message.from_user.id]['history'].append('wait_size')
        await ask_dopings(message, bot, is_back=is_back)

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_tea_type' and message.text in tea_types)
async def after_tea_type(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    user_state[message.from_user.id]['tea_type'] = message.text
    await ask_dopings(message, bot, is_back=is_back)

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_alt_milk' and message.text in alt_milk_types)
async def after_alt_milk(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    user_state[message.from_user.id]['alt_milk'] = message.text
    await ask_dopings(message, bot, is_back=is_back)

async def ask_dopings(message, bot: Bot, is_back=False):
    drink = user_state[message.from_user.id]['drink']
    if user_state[message.from_user.id].get('category') != "–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º":
        # –î–ª—è –Ω–µ-–º–æ–ª–æ—á–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã
        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º wait_name –≤ –∏—Å—Ç–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω
        user_state[message.from_user.id]['name'] = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
        user_state[message.from_user.id]['step'] = 'wait_card'
        # –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ (wait_size)
        return
    is_alt = drink in ["–ö–∞–ø—É—á–∏–Ω–æ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ", "–ú–∞—Ç—á–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–ª–æ–∫–µ"]
    kb = []
    for name, price in dopings_full:
        if is_alt and name in alt_milk_types:
            continue
        if is_alt or price == 0:
            btn_text = name
        else:
            btn_text = f"{name} (+{price}‚ÇΩ)"
        kb.append([KeyboardButton(text=btn_text)])
    kb.append([KeyboardButton(text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")])
    kb.append(back_button())
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∫ –Ω–∞–ø–∏—Ç–∫—É? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–º—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –≤—ã–±–∏—Ä–∞–π '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ')", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
    user_state[message.from_user.id]['dopings'] = []
    user_state[message.from_user.id]['step'] = 'wait_doping'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_size')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_doping' and message.text.startswith("–°–∏—Ä–æ–ø"))
async def choose_syrop(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=s)] for s in syrops] + [[KeyboardButton(text="–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")], back_button()],
        resize_keyboard=True
    )
    await message.answer("–ö–∞–∫–æ–π —Å–∏—Ä–æ–ø –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_syrop'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_doping')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_syrop' and message.text in syrops)
async def add_syrop(message: types.Message, bot: Bot, is_back=False):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    user_state[message.from_user.id]['dopings'].append(f"–°–∏—Ä–æ–ø: {message.text}")
    await ask_dopings(message, bot, is_back=is_back)

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_doping' and (message.text in [f"{d[0]} (+{d[1]}‚ÇΩ)" if d[1] > 0 else d[0] for d in dopings_full] or message.text in [d[0] for d in dopings_full]) and not message.text.startswith("–°–∏—Ä–æ–ø"))
async def add_doping(message: types.Message, bot: Bot):
    if message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    name = message.text.split(" (+")[0]
    user_state[message.from_user.id]['dopings'].append(name)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—ã–±–∏—Ä–∞–π '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ'.")

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') in ['wait_doping', 'wait_syrop'] and message.text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
async def finish_order(message: types.Message, bot: Bot):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –∏–º–µ–Ω–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã
    user_state[message.from_user.id]['name'] = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
    user_state[message.from_user.id]['step'] = 'wait_card'
    # –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥

# --- –ò–º—è, –∫–∞—Ä—Ç–∞, –≤—Ä–µ–º—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ---

# @router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_name')
# async def get_name(message: types.Message, bot: Bot, is_back=False):
#     if not is_back and message.text == BACK_TEXT:
#         await go_back(message, bot)
#         return
#     # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–ø—Ä–æ—Å–∏–º –∏–º—è –∏ –Ω–µ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ
#     if is_back:
#         await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
#         user_state[message.from_user.id]['step'] = 'wait_name'
#         return
#     user_state[message.from_user.id]['name'] = message.text
#     await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
#     user_state[message.from_user.id]['step'] = 'wait_card'
#     user_state[message.from_user.id]['history'].append('wait_name')

# –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞ –∏–º–µ–Ω–∏
async def get_name(message: types.Message, bot: Bot, is_back=False):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –∏–º–µ–Ω–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã
    user_state[message.from_user.id]['name'] = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
    user_state[message.from_user.id]['step'] = 'wait_card'
    if not is_back:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º wait_name –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
        # –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        pass

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_card')
async def get_card(message: types.Message, bot: Bot, is_back=False):
    if not is_back and message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä –∏ –Ω–µ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ
    if is_back:
        await message.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
        user_state[message.from_user.id]['step'] = 'wait_card'
        return
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã", reply_markup=ReplyKeyboardMarkup(keyboard=[back_button()], resize_keyboard=True))
        return
    user_state[message.from_user.id]['card'] = message.text
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="10 –º–∏–Ω—É—Ç")],
            [KeyboardButton(text="20 –º–∏–Ω—É—Ç")],
            [KeyboardButton(text="30 –º–∏–Ω—É—Ç")],
            back_button()
        ],
        resize_keyboard=True
    )
    await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç—ã –∑–∞–±–µ—Ä—ë—à—å —Å–≤–æ–π –∫–æ—Ñ–µ?", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_time'
    user_state[message.from_user.id]['history'].append('wait_card')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_time' and "–º–∏–Ω—É—Ç" in message.text)
async def get_time(message: types.Message, bot: Bot, is_back=False):
    if not is_back and message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∂–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ
    if is_back:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="10 –º–∏–Ω—É—Ç")],
                [KeyboardButton(text="20 –º–∏–Ω—É—Ç")],
                [KeyboardButton(text="30 –º–∏–Ω—É—Ç")],
                back_button()
            ],
            resize_keyboard=True
        )
        await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç—ã –∑–∞–±–µ—Ä—ë—à—å —Å–≤–æ–π –∫–æ—Ñ–µ?", reply_markup=kb)
        user_state[message.from_user.id]['step'] = 'wait_time'
        return
    user_state[message.from_user.id]['time'] = message.text
    await ask_comment(message, bot, is_back=is_back)
    user_state[message.from_user.id]['history'].append('wait_time')

async def ask_comment(message, bot: Bot, is_back=False):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞–ª–µ–µ / –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")], back_button()],
        resize_keyboard=True
    )
    await message.answer("–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É, –Ω–∞–ø–∏—à–∏ –∏—Ö —Å–µ–π—á–∞—Å. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–∂–º–∏ '–î–∞–ª–µ–µ / –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=kb)
    user_state[message.from_user.id]['step'] = 'wait_comment'
    if not is_back:
        user_state[message.from_user.id]['history'].append('wait_time')

@router.message(lambda message: user_state.get(message.from_user.id, {}).get('step') == 'wait_comment')
async def get_comment(message: types.Message, bot: Bot, is_back=False):
    if not is_back and message.text == BACK_TEXT:
        await go_back(message, bot)
        return
    if not is_back:
        if message.text != "–î–∞–ª–µ–µ / –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_state[message.from_user.id]['comment'] = message.text
        else:
            user_state[message.from_user.id]['comment'] = ""
    await send_order(message, bot)

async def send_order(message, bot):
    order = user_state[message.from_user.id]
    minutes = int(order['time'].split()[0])
    ready_time = (datetime.now() + timedelta(minutes=minutes, hours=3)).strftime("%H:%M")
    if order.get('summer'):
        text = f"–õ–µ—Ç–Ω–µ–µ –º–µ–Ω—é\n–ù–∞–ø–∏—Ç–æ–∫: {order['drink']}\n–†–∞–∑–º–µ—Ä: {order['size']} –º–ª ({order['price']}‚ÇΩ)"
    else:
        text = f"–ó–∞–∫–∞–∑:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.get('category','')}\n–ù–∞–ø–∏—Ç–æ–∫: {order['drink']}\n–†–∞–∑–º–µ—Ä: {order['size']} ({order['price']}‚ÇΩ)"
        if 'tea_type' in order:
            text += f"\n–°–æ—Ä—Ç —á–∞—è: {order['tea_type']}"
        if 'alt_milk' in order:
            text += f"\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ: {order['alt_milk']}"
        if order.get('dopings'):
            text += f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {', '.join(order['dopings'])}"
    if order.get('comment'):
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}"
    # text += f"\n–ò–º—è: {order['name']}\n–ö–∞—Ä—Ç–∞ –≥–æ—Å—Ç—è: {order['card']}"
    text += f"\n–ö–∞—Ä—Ç–∞ –≥–æ—Å—Ç—è: {order['card']}"
    text_client = text + f"\n–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {ready_time}"
    await message.answer("–°–ø–∞—Å–∏–±–æ‚ò∫Ô∏è –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:\n\n" + text_client, reply_markup=start_menu_keyboard())
    text_admin = text + f"\n–ó–∞–±–µ—Ä—ë—Ç —á–µ—Ä–µ–∑: {order['time']}\n–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {ready_time}"
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text_admin)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ {admin_id}: {e}")
    user_state.pop(message.from_user.id, None)
    await ask_category(message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –∑–∞–∫–∞–∑–∞: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é ---

@router.message()
async def entry_point(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    if user_id not in user_state or user_state[user_id].get('step') is None:
        await ask_category(message)

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await bot.set_my_commands([
        BotCommand(command="start", description="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
    ])
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞
    try:
        # –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π polling
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"First attempt failed: {e}")
        try:
            # –°–ø–æ—Å–æ–± 2: –° –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(
                bot,
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"]
            )
        except Exception as e2:
            logging.error(f"Second attempt failed: {e2}")
            try:
                # –°–ø–æ—Å–æ–± 3: –° —Ç–∞–π–º–∞—É—Ç–æ–º
                await dp.start_polling(
                    bot,
                    polling_timeout=60,
                    drop_pending_updates=True
                )
            except Exception as e3:
                logging.error(f"All attempts failed: {e3}")
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("   1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                print("   2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
                print("   3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    asyncio.run(main())
